#!/bin/bash

# LSF job directives
#BSUB -J bowtie2_batch                # Job name
#BSUB -P acc_pMorpheus                # Project name
#BSUB -q express                      # Queue name
#BSUB -n 10                           # Number of cores
#BSUB -R "rusage[mem=3000]"           # Memory requirements
#BSUB -R "span[hosts=1]"              # All cores on the same node
#BSUB -W 02:00                        # Walltime (HH:MM)
#BSUB -o ./3_bowtie2/bowtie2.stdout # Standard output file
#BSUB -eo ./3_bowtie2/bowtie2.stderr # Standard error file
#BSUB -L /bin/bash                    # Shell to use

# --- Setup ---
# Define variables
reference="./ref_seq/bowtie2_index/apobec3_locus/apobec3_locus"
output_dir="3_bowtie2"
index_file="${reference##*/}"
suffix=".sam"

# Create output directories
mkdir -p "$output_dir"
mkdir -p "$output_dir/$index_file"
#mkdir -p ./3_bowtie2/output

# Load necessary modules
module load python
module load bowtie2

# --- Main Processing Loop ---
for fullpath in ./0_trimmed/MT4*_2.fastq.gz
do
    # Sleep to avoid overloading the system
    sleep 0.1

    # Extract information from file path
    bar_directory="${fullpath%/*}"              # Directory containing the input file
    filename="${fullpath##*/}"                 # File name (e.g., "13_MockUn_trimmed_2.fastq.gz")
    base="${filename%%_2.fastq.gz}"            # Remove "_2.fastq.gz" to get base name (e.g., "13_MockUn_trimmed")
    sample="$base"                             # Cleaned sample name
    underscore="_"

    # Define input file names
    in1="${bar_directory}/${sample}_1.fastq.gz"
    in2="${bar_directory}/${sample}_2.fastq.gz"

    # Define output file name
    output_file="$output_dir/$index_file/${sample}${suffix}"

    echo "Processing sample: $sample"

    # Run Bowtie2
    bowtie2 -x "$reference" -1 "$in1" -2 "$in2" \
    -S "$output_file" -q -p 10 --local --no-unal

    # Optional: Run additional Python scripts (commented out by default)
    # python ./tools/sam_bin_split.py -i "$output_file" -o "$output_dir/$index_file/" -breaks 0,10,20,30,40,50,60

    echo "Finished processing: $sample"
done

echo "All samples have been processed successfully!"